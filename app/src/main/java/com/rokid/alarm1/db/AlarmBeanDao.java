package com.rokid.alarm1.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.rokid.alarm1.beans.AlarmBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ALARM_BEAN".
*/
public class AlarmBeanDao extends AbstractDao<AlarmBean, Long> {

    public static final String TABLENAME = "ALARM_BEAN";

    /**
     * Properties of entity AlarmBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_ID");
        public final static Property Year = new Property(1, String.class, "year", false, "YEAR");
        public final static Property Month = new Property(2, String.class, "month", false, "MONTH");
        public final static Property Day = new Property(3, String.class, "day", false, "DAY");
        public final static Property Hour = new Property(4, String.class, "hour", false, "HOUR");
        public final static Property Minute = new Property(5, String.class, "minute", false, "MINUTE");
        public final static Property StartDate = new Property(6, String.class, "startDate", false, "START_DATE");
        public final static Property IsRepeat = new Property(7, Boolean.class, "isRepeat", false, "IS_REPEAT");
        public final static Property IsRepeatUnit = new Property(8, Integer.class, "isRepeatUnit", false, "IS_REPEAT_UNIT");
        public final static Property DayZone = new Property(9, String.class, "dayZone", false, "DAY_ZONE");
        public final static Property ShowTime = new Property(10, Long.class, "showTime", false, "SHOW_TIME");
        public final static Property IsWakeUpAlarm = new Property(11, Boolean.class, "isWakeUpAlarm", false, "IS_WAKE_UP_ALARM");
    };


    public AlarmBeanDao(DaoConfig config) {
        super(config);
    }
    
    public AlarmBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ALARM_BEAN\" (" + //
                "\"_ID\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: _id
                "\"YEAR\" TEXT," + // 1: year
                "\"MONTH\" TEXT," + // 2: month
                "\"DAY\" TEXT," + // 3: day
                "\"HOUR\" TEXT," + // 4: hour
                "\"MINUTE\" TEXT," + // 5: minute
                "\"START_DATE\" TEXT," + // 6: startDate
                "\"IS_REPEAT\" INTEGER," + // 7: isRepeat
                "\"IS_REPEAT_UNIT\" INTEGER," + // 8: isRepeatUnit
                "\"DAY_ZONE\" TEXT," + // 9: dayZone
                "\"SHOW_TIME\" INTEGER," + // 10: showTime
                "\"IS_WAKE_UP_ALARM\" INTEGER);"); // 11: isWakeUpAlarm
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ALARM_BEAN\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, AlarmBean entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String year = entity.getYear();
        if (year != null) {
            stmt.bindString(2, year);
        }
 
        String month = entity.getMonth();
        if (month != null) {
            stmt.bindString(3, month);
        }
 
        String day = entity.getDay();
        if (day != null) {
            stmt.bindString(4, day);
        }
 
        String hour = entity.getHour();
        if (hour != null) {
            stmt.bindString(5, hour);
        }
 
        String minute = entity.getMinute();
        if (minute != null) {
            stmt.bindString(6, minute);
        }
 
        String startDate = entity.getStartDate();
        if (startDate != null) {
            stmt.bindString(7, startDate);
        }
 
        Boolean isRepeat = entity.getIsRepeat();
        if (isRepeat != null) {
            stmt.bindLong(8, isRepeat ? 1L: 0L);
        }
 
        Integer isRepeatUnit = entity.getIsRepeatUnit();
        if (isRepeatUnit != null) {
            stmt.bindLong(9, isRepeatUnit);
        }
 
        String dayZone = entity.getDayZone();
        if (dayZone != null) {
            stmt.bindString(10, dayZone);
        }
 
        Long showTime = entity.getShowTime();
        if (showTime != null) {
            stmt.bindLong(11, showTime);
        }
 
        Boolean isWakeUpAlarm = entity.getIsWakeUpAlarm();
        if (isWakeUpAlarm != null) {
            stmt.bindLong(12, isWakeUpAlarm ? 1L: 0L);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public AlarmBean readEntity(Cursor cursor, int offset) {
        AlarmBean entity = new AlarmBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // year
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // month
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // day
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // hour
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // minute
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // startDate
            cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0, // isRepeat
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // isRepeatUnit
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // dayZone
            cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10), // showTime
            cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0 // isWakeUpAlarm
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, AlarmBean entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setYear(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMonth(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDay(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setHour(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMinute(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setStartDate(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIsRepeat(cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0);
        entity.setIsRepeatUnit(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setDayZone(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setShowTime(cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10));
        entity.setIsWakeUpAlarm(cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(AlarmBean entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(AlarmBean entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
